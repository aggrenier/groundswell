<?php
/**
* @file
* Install file for Job Post module.
*/
/**
* Implements hook_install().
* - Add the body field.
* - Configure the body field.
* - Create the company name field.
*/
function social_media_install() {
  node_types_rebuild();
  $types = node_type_get_types();
  
  // add the body field to the node type
  node_add_body_field($types['social_media']);
  
  // Load the instance definition for our content type's body
  $body_instance = field_info_instance('node', 'body', 'social_media');
  
  // Configure the body field
  $body_instance['type'] = 'text_summary_or_trimmed';
  
  // Save our changes to the body field instance.
  field_update_instance($body_instance);
  
  // Create all the fields we are adding to our content type.
  foreach (_social_media_installed_fields() as $field) {
    field_create_field($field);
  }
  // Create all the instances for our fields.
  foreach (_social_media_installed_instances() as $instance) {
    $instance['entity_type'] = 'node';
    $instance['bundle'] = 'social_media';
    field_create_instance($instance);
  }
}
/**
* Return a structured array defining the fields created by this content type.
* For the job post module there is only one additional field â€“ the company name
* Other fields could be added by defining them in this function as additional elements
* in the array below
*/
function _social_media_installed_fields() {
  $t = get_t();
  return array(
    'social_media_posting' => array(
      'field_name' => 'social_media_posting',
      'label' => $t('Posting on social media'),
      'type' => 'text',
    ),
	'post' => array(
	  'field_name' => 'Twitter',
	  'label' => $t('Twitter'),
	  'type' => 'boolean',
  ),
  );

}
/**
* Return a structured array defining the field instances associated with this content type.
*/
function _social_media_installed_instances() {
  $t = get_t();
  return array(
    'social_media_posting' => array(
      'field_name' => 'social_media_posting',
      'type' => 'text',
      'label' => $t('Posting on media'),
      'widget' => array(
        'type' => 'textfield',
       ),
      ),
	 'post' => array(
	  'field_name' => 'Twitter',
	  'label' => $t('Twitter'),
	  'type' => 'boolean',
	  'widget' => array(
		'type' => 'checkbox',
		),
	 ),
    );
}

/**
 * Implements hook_requirements().
 */
function social_media_requirements($phase) {
  $requirements = array();
  // Ensure translations don't break at install time.
  $t = get_t();

  // Disable these checks at install time, because failure then causes more
  // problems due to module dependencies and Drupal's poor handling of
  // requirement errors.
  if ($phase != 'runtime') {
    return $requirements;
  }

  // Check for the presence of facebook-php-sdk library
  // given that we are in the runtime phase we can assume that
  // drupal has been fully loaded and we can use libraries helpers.
  $machine = 'facebook-php-sdk';
  $requirements[$machine] = array(
    'title' => $t('Facebook PHP SDK'),
  );
  $lib_path = libraries_get_path($machine);
  if (file_exists($lib_path . '/src/facebook.php')) {
    // Inform that the library has been found and what is the version of it
    // If there is no such file or we cannot find the version.
    $warning_data = array(
      'description' => $t('The Facebook PHP SDK library has been found but we could not verify the version.'),
      'severity' => REQUIREMENT_WARNING,
    );
    if (!file_exists($lib_path . '/src/base_facebook.php')) {
      $requirements[$machine] += $warning_data;
    }
    else {
      require_once $lib_path . '/src/base_facebook.php';
      // The file has been found, now check the version of it.
      $matches = array();
      // Facebook PHP SDK contains a constant in base_facebook.php with the
      // version.
      $version = BaseFacebook::VERSION;
      if (!empty($version)) {
        // Set the requirement OK.
        $requirements[$machine] += array(
          'value' => $version,
          'severity' => REQUIREMENT_OK,
        );
      }
      else {
        // If there is no information about the version return a warning.
        $requirements += $warning_data;
      }
    }
  }
  else {
    // Set a requirement error.
    $requirements[$machine] += array(
      'severity' => REQUIREMENT_ERROR,
      'description' => $t('The Facebook PHP SDK library has not been installed. Please clone the git repository or download the library in the common library paths from !link.', array('!link' => l($t('here'), 'https://github.com/facebook/facebook-php-sdk'))),
    );
  }

  return $requirements;
}

/**
* Implements hook_uninstall().
*/
function social_media_uninstall() {
  
// Gather all the example content that might have been created while this
// module was enabled.
  
  $sql = 'SELECT nid FROM {node} n WHERE n.type = :type';
  $result = db_query($sql, array(':type' => 'social_media'));
  $nids = array();
  foreach ($result as $row) {
    $nids[] = $row->nid;
  }
  // Delete all the nodes at once
  node_delete_multiple($nids);
  // Loop over each of the fields defined by this module and delete
  // all instances of the field, their data, and the field itself.
  foreach (array_keys(_social_media_installed_fields()) as $field) {
    field_delete_field($field);
  }
  // Loop over any remaining field instances attached to the social_media
  // content type (such as the body field) and delete them individually.
  $instances = field_info_instances('node', 'social_media');
  foreach ($instances as $instance_name => $instance) {
    field_delete_instance($instance);
  }
  // Delete our content type
  node_type_delete('social_media');
  // Purge all field infromation
  field_purge_batch(1000);
  
   variable_del('social_media_app_id');
  variable_del('social_media_app_secret');
  variable_del('social_media_account_id');
  variable_del('social_media_page');
  variable_del('social_media_pages_access_tokens');
  variable_del('social_media_token');
}

/**
 * Implements hook_update_N().
 */
function social_media_update_7100(&$sandbox) {
  // Fixes typo in variable name.
  variable_set('social_media_app_id', variable_get('fb_autopos_app_id', ''));
  variable_set('social_media_app_secret', variable_get('fb_autopos_app_secret', ''));
  variable_del('fb_autopos_app_id');
  variable_del('fb_autopos_app_secret');
}
