<?php
/**
 * @file
 * This module provides a node type called job post
 */
/**
 * Implements hook_node_info() to provide our social_media type.
 */
function social_media_node_info() {
  return array(
    'social_media' => array(
      'name' => t('Social Media'),
      'base' => 'social_media',
      'description' => t('Use this content type to post on Twitter and/or Facebook.'),
      'has_title' => TRUE,
      'title_label' => t('Social Media Post'),
      'help' => t('Post on Twitter and/or Facebook.'),
    ),
  );
}

function social_media_menu() {

  $items = array();
  //Pannel social Media
  $items['admin/config/socialMedia'] = array(
    'title' => 'Social Media',
    'description' => 'Social media configuration.',
    'position' => 'right',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer site configuration'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );

  //Tracking Pannel
  $items['admin/config/socialMedia/tracking'] = array(
    'title' => 'Tracking',
    'description' => 'Track your post.',
    'position' => 'right',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer site configuration'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );

  $items['admin/config/socialMedia/tracking/trackFacebook'] = array(
    'title' => 'Track your Facebook post',
    'description' => 'Look the comments of your Facebook posts.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('social_media_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'socialMedia.admin.inc',
  );
  $items['admin/config/socialMedia/tracking/trackTwitter'] = array(
    'title' => 'Track your Twitter post',
    'description' => 'Look the comments of Twitter posts.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('social_media_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'socialMedia.admin.inc',
  );
  $items['admin/config/socialMedia/OAuthTwitter'] = array(
    'title' => 'Twitter OAuth keys.',
    'description' => 'To add/change your Twitter OAuth keys',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('twitter_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'socialMedia.admin.inc',
  );

  $items['admin/config/socialMedia'] = array(
    'title' => 'Social Media',
    'description' => 'Allows you to set your Facebook credentials and select the pages you want to make available to Drupal to post to.',
    'access arguments' => array('administer social_media'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('social_media_global_settings'),
    'file' => 'social_media.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/config/socialMedia/settings'] = $items['admin/config/socialMedia'];
  $items['admin/config/socialMedia/settings']['type'] = MENU_DEFAULT_LOCAL_TASK;
  $items['admin/config/socialMedia/login'] = array(
    'title' => 'Social Media Login',
    'description' => 'Callback that executes right after login in with Facebook.',
    'access arguments' => array('administer social_media'),
    'page callback' => 'social_media_facebook_login',
    'type' => MENU_CALLBACK,
  );
  $items['admin/config/socialMedia/logout'] = array(
    'title' => 'Social Media Logout',
    'description' => 'Callback that executes right after login in from Facebook.',
    'access arguments' => array('administer social_media'),
    'page callback' => 'social_media_facebook_logout',
    'type' => MENU_CALLBACK,
  );
  $items['admin/config/authorization/retry'] = array(
    'title' => 'Post Authorization retry callback',
    'description' => 'Come back here after authorizing the app for publishing on timeline.',
    'access arguments' => array('access content'),
    'page callback' => 'social_media_authorization_retry',
    'type' => MENU_CALLBACK,
  );
  $items['admin/config/socialMedia/session/view'] = array(
    'title' => 'View',
    'description' => 'View the session data.',
    'page arguments' => array(5),
    'access arguments' => array('administer social_media'),
    'page callback' => 'social_media_session',
    'type' => MENU_LOCAL_ACTION,
  );
  $items['admin/config/socialMedia/session/clear'] = array(
    'title' => 'Clear',
    'description' => 'Clear the session data.',
    'page arguments' => array(5),
    'access arguments' => array('administer social_media'),
    'page callback' => 'social_media_session',
    'type' => MENU_LOCAL_ACTION,
  );
  $items['admin/config/socialMedia/session'] = array(
    'title' => 'Session handling',
    'description' => 'Perform administrative tasks over the session object.',
    'page arguments' => array('view'),
    'access arguments' => array('administer social_media'),
    'page callback' => 'social_media_session',
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

function social_media_menu_alter(&$callbacks) {
  // If the user does not have 'administer nodes' permission,
  // disable the social_media menu item by setting its access callback to FALSE.
  if (!user_access('administer nodes')) {
    $callbacks['node/add/social_media']['access callback'] = FALSE;
    // Must unset access arguments or Drupal will use user_access()
    // as a default access callback.
    unset($callbacks['node/add/social_media']['access arguments']);
  }
}

function social_media_permission() {
  return array(
    'create social Media post' => array(
      'title' => t('Create a social Media post'),
      'description' => t('Create a social Media posting'),
    ),
    'edit own social Media post' => array(
      'title' => t('Edit own social Media post'),
      'description' => t('Edit your own social Media posting'),
    ),
    'edit any social Media post' => array(
      'title' => t('Edit any social Media post'),
      'description' => t('Edit any social Media post'),
    ),
    'delete own social Media post' => array(
      'title' => t('Delete own social Media post'),
      'description' => t('Delete own social Media posting'),
    ),
    'delete any social Media post' => array(
      'title' => t('Delete any social Media post'),
      'description' => t('Delete any social Media posting'),
    ),
    'administer social Media FaceBook Posting' => array(
      'title' => t('Administer Social Media'),
      'description' => t('Allows setting default Facebook pages to publish to.'),
    ),
  );
}

/**
 * Helper function to redirect after facebook login.
 */
function social_media_facebook_login() {
  // Show error messages from Facebook.
  if (isset($_GET['error'])) {
    drupal_set_message(t('An error happened while connecting with Facebook. Reason: %reason. Description: %description', array('%reason' => $_GET['error_reason'], '%description' => $_GET['error_description'])), 'error');
  }
  else {
    try {
      $fb = new SocialMediaFB();
      if ($fb_user = $fb->getUser()) {
        $token = $fb->getAccessToken();
        variable_set('social_media_token', $token);
        $user_profile = $fb->api('/me?fields=id');
        variable_set('social_media_account_id', $user_profile['id']);
      }
    }
    catch (FacebookApiException $e) {
      // Do nothing with the exception.
      drupal_set_message($e->getMessage(), 'error');
    }
  }
  drupal_goto('admin/config/socialmedia');
}

/**
 * Helper function to redirect after facebook logout.
 */
function social_media_facebook_logout() {
  try {
    $fb = new SocialMediaFB();
    // Invalidate access_token
    $fb->api('/' . variable_get('social_media_account_id', 'me') . '/permissions', 'DELETE');
  }
  catch (FacebookApiException $e) {
    // Do nothing with the exception.
    drupal_set_message($e->getMessage(), 'error');
  }
  drupal_set_message(t('Your account has been logged out from Facebook and the permissions for the app have been removed.'));
  // Delete stored variables.
  variable_del('social_media_account_id');
  variable_del('social_media_page');
  drupal_goto('admin/config/socialmedia');
}



/**
 * Implements hook_node_access().
 */
function social_media_access($op, $node, $account) {
  $is_author = $account->uid == $node->uid;
  switch ($op) {
    case 'create':
      // Allow if user's role has 'create social' permission.
      if (user_access('create social Media', $account)) {
        return NODE_ACCESS_ALLOW;
      }
    case 'update':
      // Allow if user's role has 'edit own social' permission and user is
      // the author; or if the user's role has 'edit any social' permission.
      if (user_access('edit own social Media', $account) && $is_author ||
        user_access('edit any social Media', $account)
      ) {
        return NODE_ACCESS_ALLOW;
      }
    case 'delete':
      // Allow if user's role has 'delete own social' permission and user is
      // the author; or if the user's role has 'delete any social' permission.
      if (user_access('delete own social Media', $account) && $is_author ||
        user_access('delete any social Media', $account)
      ) {
        return NODE_ACCESS_ALLOW;
      }
  }
}

/**
 * Helper function to load the facebook php sdk library.
 *
 * @param string $basename
 *   Optional basename where to find the library
 *
 * @throws Exception
 */
function _load_facebook_sdk($basename = NULL) {
  $lib_path = libraries_get_path('facebook-php-sdk', $basename);
  if (!file_exists($lib_path . '/src/facebook.php')) {
    // In case we cannot find the file display an error and redirect to the
    // report status page (if the user can access it).
    if (user_access('view site reports')) {
      drupal_set_message(t('You need to install the !library to use the Facebook Autopost module. Please download the library to sites/all/libraries/facebook-php-sdk.', array(
        '!library' => l(t('Facebook PHP Library'), 'https://github.com/facebook/facebook-php-sdk', array(
          'attributes' => array('target' => '_blank'),
        )
      ))), 'error');
      drupal_goto('admin/reports/status');
    }
    else {
      // The user cannot see the site reports with further instructions
      // throw an Exception.
      throw new Exception(t('Facebook Autopost could not be started because the Facebook PHP library is missing. Please contact system administration to communicate this error.'));
    }
  }
  else {
    require_once $lib_path . '/src/facebook.php';
  }
}

/**
 * Page callback to perform an action on the session object.
 *
 * @param string $op
 *   The operation being performed. Supported:
 *     - clear
 *     - view
 */
function social_media_session($op = 'view') {
  $session = new SocialMediaFBSession();
  switch ($op) {
    case 'view':
      if ($session->isStored()) {
        $output = $session->getStoredPublication();
        // Use devel's output if available.
        if (function_exists('dpm')) {
          return dpm($output);
        }
        return '<pre>' . print_r($output, TRUE) . '</pre>';
      }
      else {
        return t('No session data to show.');
      }

    case 'clear':
      $session->removePublication();
      drupal_set_message(t('Session data for Social Media Facebook has been removed.'));
      return SocialMediaFBSession();
  }
}

/**
 * Helper function to publish on user timeline after failing the first time.
 */
function social_media_authorization_retry() {
  try {
    $session = new SocialMediaFBSession();
    // Check if there is all necessary data.
    if ($session->isStored()) {
      $data = $session->getStoredPublication();
      $fb = facebook_autopost($data['publication']['type']);
      $fb->setDestination($data['target'])->publish($data['publication']);
    }
  }
  catch (Exception $e) {
    // Not removing session would lead to be unable to publish until
    // session gets regenerated.
    $session = new SocialMediaFBSession();
    $session->removePublication();
    watchdog('social_media', $e->getMessage(), array(), WATCHDOG_ERROR);
    drupal_set_message($e->getMessage(), 'error');
  }
  // This method does not throw anything.
  $destination = isset($data['destination']) ? $data['destination'] : '<front>';
  $session->removePublication();
  drupal_goto($destination);
}

/**
 * Factory function.
 */
function facebook_autopost($type) {
  switch ($type) {
    case 'photo':
      $fb = new SocialMediaFBPhoto();
      break;

    default:
      $fb = new SocialMediaFB();
      break;
  }
  return $fb->setType($type);
}

/**
 * Implement hook_form() with the standard default form.
 */
function social_media_form($node, $form_state) {
  return node_content_form($node, $form_state);
}